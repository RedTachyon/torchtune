# Config for multi-device full finetuning in full_finetune_distributed.py
# using a Llama3.2 3B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Llama-3.1-8B --output-dir /checkpoint/kwiat/tmp/Llama-3.1-8B --ignore-patterns "original/consolidated.00.pth"
#
# To launch on 8 devices, run the following command from root:
#   tune run --nproc_per_node 8 r1_full_finetune_distributed --config llama3_2/8B_full_rl_cuda
#
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   tune run --nproc_per_node 4 full_finetune_distributed --config llama3_2/3B_full checkpointer.checkpoint_dir=<YOUR_CHECKPOINT_DIR>
#
# This config works best when the model is being fine-tuned on 2+ GPUs.
# Single device full finetuning requires more memory optimizations. It's
# best to use 3B_full_single_device.yaml for those cases

name: grpo_sft_start_eps02_normalloss
output_dir: /checkpoint/kwiat/checkpoints/${name}

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
#  path: /checkpoint/kwiat/tmp/Llama-3.1-8B/original/tokenizer.model
  path: /checkpoint/kwiat/tmp/llama8B_gsm8k_sft_part0/epoch_0/original/tokenizer.model
  max_seq_len: null

# Dataset
dataset:
  _component_: torchtune.datasets.gsm8k_dataset
  partition: 1-9/10
#  packed: False  # True increases speed
seed: null
shuffle: False

# Model Arguments
model:
  _component_: torchtune.models.llama3_1.llama3_1_8b

checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
#  checkpoint_dir: /checkpoint/kwiat/tmp/Llama-3.1-8B/
  checkpoint_dir: /checkpoint/kwiat/tmp/llama8B_gsm8k_sft_part0/epoch_0/
  checkpoint_files: [
    ft-model-00001-of-00004.safetensors,
    ft-model-00002-of-00004.safetensors,
    ft-model-00003-of-00004.safetensors,
    ft-model-00004-of-00004.safetensors,
  ]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: False
save_every_n_epochs: 1

# Fine-tuning arguments
batch_size: 1
grpo_samples: 32
forward_batch_size: 1
max_generated_tokens: 512
top_k: null
temperature: 1.0

ppo_epochs: 3
ppo_batch_size: 16

num_steps: 10000

clip_grad_norm: 10.0

epochs: 10
optimizer:
  _component_: torch.optim.AdamW
  lr: 1e-6  # set 2e-7 to avoid nans?
  fused: True
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 50
loss:
  _component_: torchtune.rlhf.loss.GRPOLoss
  kl_coeff: 0.01
  epsilon: 0.2
max_steps_per_epoch: null
gradient_accumulation_steps: 1  # Use to increase virtual batch size

# Training env
device: cuda

# Memory management
enable_activation_checkpointing: True  # True reduces memory
enable_activation_offloading: True  # True reduces memory
compile: False  # pytorch compile, set to true for better perf/memory
optimizer_in_bwd: False  # True saves memory. Requires gradient_accumulation_steps=1

# Reduced precision
dtype: bf16
custom_sharded_layers: ['decoder.tok_embeddings']


# Logging
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: grpo_gsm8k
  log_dir: ${output_dir}/logs
  name: ${name}
log_every_n_steps: 1
log_peak_memory_stats: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: True

  #Output directory of trace artifacts
  output_dir: ${output_dir}/profiling_outputs

  #`torch.profiler.ProfilerActivity` types to trace
  cpu: True
  cuda: True

  #trace options passed to `torch.profiler.profile`
  profile_memory: True
  with_stack: True
  record_shapes: True
  with_flops: False

  # `torch.profiler.schedule` options:
  # wait_steps -> wait, warmup_steps -> warmup, active_steps -> active, num_cycles -> repeat
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1
